{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bilstr\\\\Documents\\\\GitHub\\\\part7\\\\extended-bloglist\\\\src\\\\components\\\\UserBlogs.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersBlogs = () => {\n  _s();\n  const id = useParams().id;\n  console.log(id, 'is id in usersblogs');\n  const bloggies = useSelector(state => state.blogs);\n  console.log(bloggies, 'is bloggies');\n  if (bloggies.length > 0) {\n    //find user that has same id as id\n    //save that user info to nomen\n\n    var nomen = '';\n    const posterBlogs = [];\n    const blogObj = {\n      title: '',\n      id: ''\n    };\n\n    //put blogs the user has posted into array\n    for (let j = 0; j < bloggies.length; j++) {\n      //if the user of the blog isn't null\n      if (bloggies[j].user) {\n        //console.log(bloggies[j].user, 'is bloggies j user when making sure it isn not null')\n        //if the id of the blog poster is the same as the id from saved user\n        if (bloggies[j].user.id === id) {\n          //console.log(bloggies[j].user, 'is bloggies j user when the user id equals id from params')\n          nomen = bloggies[j].user.personName;\n          const newBlogEntry = Object.create(blogObj);\n          newBlogEntry.title = bloggies[j].title;\n          newBlogEntry.id = bloggies[j].id;\n          posterBlogs.push(newBlogEntry);\n        }\n      }\n    }\n\n    //console.log(posterBlogs, 'is poster blogs')\n    //const phrases = anecdotes.find((words) => words.id=== Number(id))\n    //if do this don't think i can get nomen so not going to\n    //could do above for posterBlogs\n    //will decide later\n\n    //maybe use a href\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: nomen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Here is the list of blogs \", nomen, \" has posted:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), posterBlogs.map((posting, ind) => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/blogs/${posting.id}`,\n              children: posting.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(UsersBlogs, \"kPJtPqkhnTqvs2fiR6O7zCCluwo=\", true);\n_c = UsersBlogs;\nexport default UserBlogs;\nvar _c;\n$RefreshReg$(_c, \"UsersBlogs\");","map":{"version":3,"names":["UsersBlogs","id","useParams","console","log","bloggies","useSelector","state","blogs","length","nomen","posterBlogs","blogObj","title","j","user","personName","newBlogEntry","Object","create","push","map","posting","ind","UserBlogs"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/components/UserBlogs.js"],"sourcesContent":["const UsersBlogs = () => {\n  const id = useParams().id\n  console.log(id, 'is id in usersblogs')\n\n  const bloggies = useSelector(state => state.blogs)\n  console.log(bloggies, 'is bloggies')\n\n  if (bloggies.length > 0) {\n    //find user that has same id as id\n    //save that user info to nomen\n\n    var nomen = ''\n    const posterBlogs = []\n    const blogObj = {\n      title: '',\n      id: ''\n    }\n\n    //put blogs the user has posted into array\n    for (let j = 0; j < bloggies.length; j++) {\n      //if the user of the blog isn't null\n      if (bloggies[j].user){\n        //console.log(bloggies[j].user, 'is bloggies j user when making sure it isn not null')\n        //if the id of the blog poster is the same as the id from saved user\n        if (bloggies[j].user.id === id) {\n          //console.log(bloggies[j].user, 'is bloggies j user when the user id equals id from params')\n          nomen = bloggies[j].user.personName\n          const newBlogEntry = Object.create(blogObj)\n          newBlogEntry.title = bloggies[j].title\n          newBlogEntry.id = bloggies[j].id\n          posterBlogs.push(newBlogEntry)\n        }\n      }\n    }\n\n    //console.log(posterBlogs, 'is poster blogs')\n    //const phrases = anecdotes.find((words) => words.id=== Number(id))\n    //if do this don't think i can get nomen so not going to\n    //could do above for posterBlogs\n    //will decide later\n\n    //maybe use a href\n\n    return (\n      <div className=\"container\">\n        <h1>{nomen}</h1>\n        <h3>Here is the list of blogs {nomen} has posted:</h3>\n        {posterBlogs.map((posting, ind) => {\n          return (\n            <ul key={ind}>\n              <li><Link to={`/blogs/${posting.id}`}>{posting.title}</Link></li>\n            </ul>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <Spinner animation=\"border\" variant=\"primary\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  )\n}\n\nexport default UserBlogs"],"mappings":";;;AAAA,MAAMA,UAAU,GAAG,MAAM;EAAA;EACvB,MAAMC,EAAE,GAAGC,SAAS,EAAE,CAACD,EAAE;EACzBE,OAAO,CAACC,GAAG,CAACH,EAAE,EAAE,qBAAqB,CAAC;EAEtC,MAAMI,QAAQ,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAAC;EAClDL,OAAO,CAACC,GAAG,CAACC,QAAQ,EAAE,aAAa,CAAC;EAEpC,IAAIA,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;IACvB;IACA;;IAEA,IAAIC,KAAK,GAAG,EAAE;IACd,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAE,EAAE;MACTZ,EAAE,EAAE;IACN,CAAC;;IAED;IACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,CAACI,MAAM,EAAEK,CAAC,EAAE,EAAE;MACxC;MACA,IAAIT,QAAQ,CAACS,CAAC,CAAC,CAACC,IAAI,EAAC;QACnB;QACA;QACA,IAAIV,QAAQ,CAACS,CAAC,CAAC,CAACC,IAAI,CAACd,EAAE,KAAKA,EAAE,EAAE;UAC9B;UACAS,KAAK,GAAGL,QAAQ,CAACS,CAAC,CAAC,CAACC,IAAI,CAACC,UAAU;UACnC,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACP,OAAO,CAAC;UAC3CK,YAAY,CAACJ,KAAK,GAAGR,QAAQ,CAACS,CAAC,CAAC,CAACD,KAAK;UACtCI,YAAY,CAAChB,EAAE,GAAGI,QAAQ,CAACS,CAAC,CAAC,CAACb,EAAE;UAChCU,WAAW,CAACS,IAAI,CAACH,YAAY,CAAC;QAChC;MACF;IACF;;IAEA;IACA;IACA;IACA;IACA;;IAEA;;IAEA,oBACE;MAAK,SAAS,EAAC,WAAW;MAAA,wBACxB;QAAA,UAAKP;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,eAChB;QAAA,WAAI,4BAA0B,EAACA,KAAK,EAAC,cAAY;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,EACrDC,WAAW,CAACU,GAAG,CAAC,CAACC,OAAO,EAAEC,GAAG,KAAK;QACjC,oBACE;UAAA,uBACE;YAAA,uBAAI,QAAC,IAAI;cAAC,EAAE,EAAG,UAASD,OAAO,CAACrB,EAAG,EAAE;cAAA,UAAEqB,OAAO,CAACT;YAAK;cAAA;cAAA;cAAA;YAAA;UAAQ;YAAA;YAAA;YAAA;UAAA;QAAK,GAD1DU,GAAG;UAAA;UAAA;UAAA;QAAA,QAEP;MAET,CAAC,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;EAEA,oBACE,QAAC,OAAO;IAAC,SAAS,EAAC,QAAQ;IAAC,OAAO,EAAC,SAAS;IAAA,uBAC3C;MAAM,SAAS,EAAC,iBAAiB;MAAA,UAAC;IAAU;MAAA;MAAA;MAAA;IAAA;EAAO;IAAA;IAAA;IAAA;EAAA,QAC3C;AAEd,CAAC;AAAA,GA/DKvB,UAAU;AAAA,KAAVA,UAAU;AAiEhB,eAAewB,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}