{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport gravService from '../services/gravatar';\nconst initialState = [];\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    saveUser(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in save user');\n      console.log(state, 'is state in save user');\n      console.log(action, 'is action in save user');\n      const copyStateLogin = {\n        ...state\n      };\n      copyStateLogin.loggedUser = action.payload;\n      return copyStateLogin;\n      //return state.concat(action.payload)\n    },\n\n    setToken(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in set token');\n      console.log(action, 'is action in set token');\n      const copyStateToken = {\n        ...state\n      };\n      copyStateToken.token = action.payload;\n      return copyStateToken;\n      //return action.payload\n    },\n\n    appendUsers(state, action) {\n      console.log(action, 'is action in append users');\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in append users');\n      //const copyState = [ ...state ]\n      const copyState = {\n        ...state\n      };\n      console.log(copyState, 'is copy state in append users');\n      //copyState.concat(action.payload)\n      copyState.appendUsers = action.payload;\n      return copyState;\n      //return state.concat(action.payload)\n    }\n  }\n});\n\nexport const {\n  saveUser,\n  setToken,\n  appendUsers\n} = userSlice.actions;\nexport const userData = user => {\n  //will use save user reducer\n  console.log(user, 'is user in userdata');\n  return async dispatch => {\n    const userInfo = user;\n    dispatch(saveUser(userInfo));\n  };\n};\nexport const userToken = user => {\n  return async dispatch => {\n    console.log(user, 'is user arg in user token in user reducer');\n    const useToke = await blogService.setToken(user.token);\n    console.log(user.token, 'is user dot token in usertoken in user reducer');\n    console.log(useToke, 'is usetoke in usertoken in user reducer');\n    dispatch(setToken(useToke));\n  };\n};\nexport const initializeUsers = () => {\n  return async dispatch => {\n    const userList = await userService.getAll();\n    console.log(userList, 'is userList in get users');\n    dispatch(appendUsers(userList));\n  };\n};\n\n//const handleLogin = (user) => {\n//  console.log('we are in the handlelogin in user reducer')\n//  return async dispatch => {\n//    const usering = await loginService.login({ username: user.username, password: user.password })\n//    console.log('we are in the return async dispatch in handlelogin')\n//    window.localStorage.setItem( 'loggedBlogAppUser', JSON.stringify(usering) )\n//    dispatch(userData(usering))\n//    dispatch(userToken(usering))\n//  }\n//}\n\nexport const newUser = user => {\n  console.log(user, 'is user in newUser');\n  //handleLogin(user)\n\n  return async dispatch => {\n    //const newUserData = await userService.create(user).catch( (error) => console.log(error, 'is the error in new user in user reducer'))\n    const newUserData = await userService.create(user);\n    console.log(newUserData, 'is new user data');\n    //can't use newUserData to sign in user because does not include password\n    dispatch(appendUsers(newUserData));\n  };\n};\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","gravService","initialState","userSlice","name","reducers","saveUser","state","action","console","log","JSON","parse","stringify","copyStateLogin","loggedUser","payload","setToken","copyStateToken","token","appendUsers","copyState","actions","userData","user","dispatch","userInfo","userToken","useToke","blogService","initializeUsers","userList","userService","getAll","newUser","newUserData","create","reducer"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/reducers/gravReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport gravService from '../services/gravatar'\n\nconst initialState = []\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    saveUser(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in save user')\n      console.log(state, 'is state in save user')\n      console.log(action, 'is action in save user')\n      const copyStateLogin = { ...state }\n      copyStateLogin.loggedUser = action.payload\n      return copyStateLogin\n      //return state.concat(action.payload)\n    },\n    setToken(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in set token')\n      console.log(action, 'is action in set token')\n      const copyStateToken = { ...state }\n      copyStateToken.token = action.payload\n      return copyStateToken\n      //return action.payload\n    },\n    appendUsers(state, action) {\n      console.log(action, 'is action in append users')\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in append users')\n      //const copyState = [ ...state ]\n      const copyState = { ...state }\n      console.log(copyState, 'is copy state in append users')\n      //copyState.concat(action.payload)\n      copyState.appendUsers = action.payload\n      return copyState\n      //return state.concat(action.payload)\n    }\n  }\n})\n\nexport const { saveUser, setToken, appendUsers } = userSlice.actions\n\nexport const userData = (user) => {\n  //will use save user reducer\n  console.log(user, 'is user in userdata')\n  return async dispatch => {\n    const userInfo = user\n    dispatch(saveUser(userInfo))\n  }\n}\n\nexport const userToken = (user) => {\n  return async dispatch => {\n    console.log(user, 'is user arg in user token in user reducer')\n    const useToke = await blogService.setToken(user.token)\n    console.log(user.token, 'is user dot token in usertoken in user reducer')\n    console.log(useToke, 'is usetoke in usertoken in user reducer')\n    dispatch(setToken(useToke))\n  }\n}\n\nexport const initializeUsers = () => {\n  return async dispatch => {\n    const userList = await userService.getAll()\n    console.log(userList, 'is userList in get users')\n    dispatch(appendUsers(userList))\n  }\n}\n\n//const handleLogin = (user) => {\n//  console.log('we are in the handlelogin in user reducer')\n//  return async dispatch => {\n//    const usering = await loginService.login({ username: user.username, password: user.password })\n//    console.log('we are in the return async dispatch in handlelogin')\n//    window.localStorage.setItem( 'loggedBlogAppUser', JSON.stringify(usering) )\n//    dispatch(userData(usering))\n//    dispatch(userToken(usering))\n//  }\n//}\n\nexport const newUser = (user) => {\n\n  console.log(user, 'is user in newUser')\n  //handleLogin(user)\n\n  return async dispatch => {\n    //const newUserData = await userService.create(user).catch( (error) => console.log(error, 'is the error in new user in user reducer'))\n    const newUserData = await userService.create(user)\n    console.log(newUserData, 'is new user data')\n    //can't use newUserData to sign in user because does not include password\n    dispatch(appendUsers(newUserData))\n  }\n}\n\nexport default userSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}