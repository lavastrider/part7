{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport blogService from '../services/blogs';\nimport userService from '../services/user';\nimport loginService from '../services/login';\n//import { setNotif } from './notifReducer'\n\nconst initialState = [];\nconst dispatch = useDispatch();\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    saveUser(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in save user');\n      console.log(state, 'is state in save user');\n      console.log(action, 'is action in save user');\n      const copyStateLogin = {\n        ...state\n      };\n      copyStateLogin.loggedUser = action.payload;\n      return copyStateLogin;\n      //return state.concat(action.payload)\n    },\n\n    setToken(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in set token');\n      console.log(action, 'is action in set token');\n      const copyStateToken = {\n        ...state\n      };\n      copyStateToken.token = action.payload;\n      return copyStateToken;\n      //return action.payload\n    },\n\n    appendUsers(state, action) {\n      console.log(action, 'is action in append users');\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in append users');\n      //const copyState = [ ...state ]\n      const copyState = {\n        ...state\n      };\n      console.log(copyState, 'is copy state in append users');\n      //copyState.concat(action.payload)\n      copyState.appendUsers = action.payload;\n      return copyState;\n      //return state.concat(action.payload)\n    }\n  }\n});\n\nexport const {\n  saveUser,\n  setToken,\n  appendUsers\n} = userSlice.actions;\nexport const userData = user => {\n  //will use save user reducer\n  console.log(user, 'is user in userdata');\n  return async dispatch => {\n    const userInfo = user;\n    dispatch(saveUser(userInfo));\n  };\n};\nexport const userToken = user => {\n  return async dispatch => {\n    console.log(user, 'is user arg in user token in user reducer');\n    const useToke = await blogService.setToken(user.token);\n    console.log(user.token, 'is user dot token in usertoken in user reducer');\n    console.log(useToke, 'is usetoke in usertoken in user reducer');\n    dispatch(setToken(useToke));\n  };\n};\nexport const initializeUsers = () => {\n  return async dispatch => {\n    const userList = await userService.getAll();\n    console.log(userList, 'is userList in get users');\n    dispatch(appendUsers(userList));\n  };\n};\nconst handleLogin = async user => {\n  const usering = await loginService.login({\n    username: user.username,\n    password: user.password\n  });\n  window.localStorage.setItem('loggedBlogAppUser', JSON.stringify(usering));\n  dispatch(userData(usering));\n  dispatch(userToken(usering));\n};\nexport const newUser = user => {\n  console.log(user, 'is user in newUser');\n  handleLogin(user);\n  return async dispatch => {\n    const newUserData = await userService.create(user);\n    console.log(newUserData, 'is new user data');\n    //can't use newUserData to sign in user because does not include password\n    dispatch(appendUsers(newUserData));\n  };\n};\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","useDispatch","blogService","userService","loginService","initialState","dispatch","userSlice","name","reducers","saveUser","state","action","console","log","JSON","parse","stringify","copyStateLogin","loggedUser","payload","setToken","copyStateToken","token","appendUsers","copyState","actions","userData","user","userInfo","userToken","useToke","initializeUsers","userList","getAll","handleLogin","usering","login","username","password","window","localStorage","setItem","newUser","newUserData","create","reducer"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/reducers/userReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport blogService from '../services/blogs'\nimport userService from '../services/user'\nimport loginService from '../services/login'\n//import { setNotif } from './notifReducer'\n\nconst initialState = []\nconst dispatch = useDispatch()\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    saveUser(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in save user')\n      console.log(state, 'is state in save user')\n      console.log(action, 'is action in save user')\n      const copyStateLogin = { ...state }\n      copyStateLogin.loggedUser = action.payload\n      return copyStateLogin\n      //return state.concat(action.payload)\n    },\n    setToken(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in set token')\n      console.log(action, 'is action in set token')\n      const copyStateToken = { ...state }\n      copyStateToken.token = action.payload\n      return copyStateToken\n      //return action.payload\n    },\n    appendUsers(state, action) {\n      console.log(action, 'is action in append users')\n      console.log(JSON.parse(JSON.stringify(state)), 'is json json state in append users')\n      //const copyState = [ ...state ]\n      const copyState = { ...state }\n      console.log(copyState, 'is copy state in append users')\n      //copyState.concat(action.payload)\n      copyState.appendUsers = action.payload\n      return copyState\n      //return state.concat(action.payload)\n    }\n  }\n})\n\nexport const { saveUser, setToken, appendUsers } = userSlice.actions\n\nexport const userData = (user) => {\n  //will use save user reducer\n  console.log(user, 'is user in userdata')\n  return async dispatch => {\n    const userInfo = user\n    dispatch(saveUser(userInfo))\n  }\n}\n\nexport const userToken = (user) => {\n  return async dispatch => {\n    console.log(user, 'is user arg in user token in user reducer')\n    const useToke = await blogService.setToken(user.token)\n    console.log(user.token, 'is user dot token in usertoken in user reducer')\n    console.log(useToke, 'is usetoke in usertoken in user reducer')\n    dispatch(setToken(useToke))\n  }\n}\n\nexport const initializeUsers = () => {\n  return async dispatch => {\n    const userList = await userService.getAll()\n    console.log(userList, 'is userList in get users')\n    dispatch(appendUsers(userList))\n  }\n}\n\nconst handleLogin = async (user) => {\n  const usering = await loginService.login({ username: user.username, password: user.password })\n  window.localStorage.setItem( 'loggedBlogAppUser', JSON.stringify(usering) )\n  dispatch(userData(usering))\n  dispatch(userToken(usering))\n}\n\nexport const newUser = (user) => {\n\n  console.log(user, 'is user in newUser')\n  handleLogin(user)\n\n  return async dispatch => {\n    const newUserData = await userService.create(user)\n    console.log(newUserData, 'is new user data')\n    //can't use newUserData to sign in user because does not include password\n    dispatch(appendUsers(newUserData))\n  }\n}\n\nexport default userSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}