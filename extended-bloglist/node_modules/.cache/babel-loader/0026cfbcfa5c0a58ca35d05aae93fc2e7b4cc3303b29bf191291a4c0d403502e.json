{"ast":null,"code":"import Spinner from'react-bootstrap/Spinner';import{useParams,Link}from'react-router-dom';import{useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UserBlogs=function UserBlogs(){var id=useParams().id;console.log(id,'is id in usersblogs');var bloggies=useSelector(function(state){return state.blogs;});console.log(bloggies,'is bloggies');if(bloggies.length>0){//find user that has same id as id\n//save that user info to nomen\nvar nomen='';var posterBlogs=[];var blogObj={title:'',id:''};//put blogs the user has posted into array\nfor(var j=0;j<bloggies.length;j++){//if the user of the blog isn't null\nif(bloggies[j].user){//console.log(bloggies[j].user, 'is bloggies j user when making sure it isn not null')\n//if the id of the blog poster is the same as the id from saved user\nif(bloggies[j].user.id===id){//console.log(bloggies[j].user, 'is bloggies j user when the user id equals id from params')\nnomen=bloggies[j].user.personName;var newBlogEntry=Object.create(blogObj);newBlogEntry.title=bloggies[j].title;newBlogEntry.id=bloggies[j].id;posterBlogs.push(newBlogEntry);}}}//console.log(posterBlogs, 'is poster blogs')\n//const phrases = anecdotes.find((words) => words.id=== Number(id))\n//if do this don't think i can get nomen so not going to\n//could do above for posterBlogs\n//will decide later\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:nomen}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Here is the list of blogs \",nomen,\" has posted:\"]}),posterBlogs.map(function(posting,ind){return/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(Link,{to:\"/blogs/\".concat(posting.id),children:posting.title})})},ind);})]});}return/*#__PURE__*/_jsx(Spinner,{animation:\"border\",variant:\"primary\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})});};export default UserBlogs;","map":{"version":3,"names":["Spinner","useParams","Link","useSelector","UserBlogs","id","console","log","bloggies","state","blogs","length","nomen","posterBlogs","blogObj","title","j","user","personName","newBlogEntry","Object","create","push","map","posting","ind"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/components/UserBlogs.js"],"sourcesContent":["import Spinner from 'react-bootstrap/Spinner'\nimport { useParams, Link } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\n\nconst UserBlogs = () => {\n  const id = useParams().id\n  console.log(id, 'is id in usersblogs')\n\n  const bloggies = useSelector(state => state.blogs)\n  console.log(bloggies, 'is bloggies')\n\n  if (bloggies.length > 0) {\n    //find user that has same id as id\n    //save that user info to nomen\n\n    var nomen = ''\n    const posterBlogs = []\n    const blogObj = {\n      title: '',\n      id: ''\n    }\n\n    //put blogs the user has posted into array\n    for (let j = 0; j < bloggies.length; j++) {\n      //if the user of the blog isn't null\n      if (bloggies[j].user){\n        //console.log(bloggies[j].user, 'is bloggies j user when making sure it isn not null')\n        //if the id of the blog poster is the same as the id from saved user\n        if (bloggies[j].user.id === id) {\n          //console.log(bloggies[j].user, 'is bloggies j user when the user id equals id from params')\n          nomen = bloggies[j].user.personName\n          const newBlogEntry = Object.create(blogObj)\n          newBlogEntry.title = bloggies[j].title\n          newBlogEntry.id = bloggies[j].id\n          posterBlogs.push(newBlogEntry)\n        }\n      }\n    }\n\n    //console.log(posterBlogs, 'is poster blogs')\n    //const phrases = anecdotes.find((words) => words.id=== Number(id))\n    //if do this don't think i can get nomen so not going to\n    //could do above for posterBlogs\n    //will decide later\n\n    return (\n      <div className=\"container\">\n        <h1>{nomen}</h1>\n        <h3>Here is the list of blogs {nomen} has posted:</h3>\n        {posterBlogs.map((posting, ind) => {\n          return (\n            <ul key={ind}>\n              <li><Link to={`/blogs/${posting.id}`}>{posting.title}</Link></li>\n            </ul>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <Spinner animation=\"border\" variant=\"primary\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  )\n}\n\nexport default UserBlogs"],"mappings":"AAAA,MAAOA,QAAO,KAAM,yBAAyB,CAC7C,OAASC,SAAS,CAAEC,IAAI,KAAQ,kBAAkB,CAClD,OAASC,WAAW,KAAQ,aAAa,yFAGzC,GAAMC,UAAS,CAAG,QAAZA,UAAS,EAAS,CACtB,GAAMC,GAAE,CAAGJ,SAAS,EAAE,CAACI,EAAE,CACzBC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAE,qBAAqB,CAAC,CAEtC,GAAMG,SAAQ,CAAGL,WAAW,CAAC,SAAAM,KAAK,QAAIA,MAAK,CAACC,KAAK,GAAC,CAClDJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAE,aAAa,CAAC,CAEpC,GAAIA,QAAQ,CAACG,MAAM,CAAG,CAAC,CAAE,CACvB;AACA;AAEA,GAAIC,MAAK,CAAG,EAAE,CACd,GAAMC,YAAW,CAAG,EAAE,CACtB,GAAMC,QAAO,CAAG,CACdC,KAAK,CAAE,EAAE,CACTV,EAAE,CAAE,EACN,CAAC,CAED;AACA,IAAK,GAAIW,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,QAAQ,CAACG,MAAM,CAAEK,CAAC,EAAE,CAAE,CACxC;AACA,GAAIR,QAAQ,CAACQ,CAAC,CAAC,CAACC,IAAI,CAAC,CACnB;AACA;AACA,GAAIT,QAAQ,CAACQ,CAAC,CAAC,CAACC,IAAI,CAACZ,EAAE,GAAKA,EAAE,CAAE,CAC9B;AACAO,KAAK,CAAGJ,QAAQ,CAACQ,CAAC,CAAC,CAACC,IAAI,CAACC,UAAU,CACnC,GAAMC,aAAY,CAAGC,MAAM,CAACC,MAAM,CAACP,OAAO,CAAC,CAC3CK,YAAY,CAACJ,KAAK,CAAGP,QAAQ,CAACQ,CAAC,CAAC,CAACD,KAAK,CACtCI,YAAY,CAACd,EAAE,CAAGG,QAAQ,CAACQ,CAAC,CAAC,CAACX,EAAE,CAChCQ,WAAW,CAACS,IAAI,CAACH,YAAY,CAAC,CAChC,CACF,CACF,CAEA;AACA;AACA;AACA;AACA;AAEA,mBACE,aAAK,SAAS,CAAC,WAAW,wBACxB,oBAAKP,KAAK,EAAM,cAChB,sBAAI,4BAA0B,CAACA,KAAK,CAAC,cAAY,GAAK,CACrDC,WAAW,CAACU,GAAG,CAAC,SAACC,OAAO,CAAEC,GAAG,CAAK,CACjC,mBACE,iCACE,iCAAI,KAAC,IAAI,EAAC,EAAE,kBAAYD,OAAO,CAACnB,EAAE,CAAG,UAAEmB,OAAO,CAACT,KAAK,EAAQ,EAAK,EAD1DU,GAAG,CAEP,CAET,CAAC,CAAC,GACE,CAEV,CAEA,mBACE,KAAC,OAAO,EAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,uBAC3C,aAAM,SAAS,CAAC,iBAAiB,UAAC,YAAU,EAAO,EAC3C,CAEd,CAAC,CAED,cAAerB,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}