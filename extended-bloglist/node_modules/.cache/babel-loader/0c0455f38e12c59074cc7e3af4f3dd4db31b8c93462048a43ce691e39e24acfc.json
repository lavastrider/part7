{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport commentService from '../services/comments';\nimport { setNotif } from './notifReducer';\nconst initialState = [];\nconst commSlice = createSlice({\n  name: 'quips',\n  initialState,\n  reducers: {\n    appendComments(state, action) {\n      //console.log(action, 'is action in append comments in comment reducer')\n      //console.log(JSON.parse(JSON.stringify(state)), 'is json json state in comment reducer')\n      //const newComms = [\n      return state.concat(action.payload);\n    },\n    addVote(state, action) {\n      //console.log(action, 'is action in addVote reducer')\n      const id = action.payload.id;\n      //console.log(id, 'is id in add vote')\n      const phraseToReplace = state.find(word => word.id === id);\n      //console.log(JSON.parse(JSON.stringify(phraseToReplace)), 'is json json phrasetoreplace in add vote reducer')\n      //console.log(phraseToReplace.likes, 'is pTR likes in add vote')\n      phraseToReplace.likes = action.payload.likes + 1;\n      console.log(phraseToReplace.likes, 'is pTR likes in add vote after made the same as action payload likes');\n    },\n    removeBlog(state, action) {\n      //console.log(action, 'is action in removeblog')\n      const id = action.payload;\n      const blogWithoutDeleted = state.filter(diary => diary.id !== id);\n      return blogWithoutDeleted;\n    }\n  }\n});\nexport const {\n  addVote,\n  appendComments,\n  removeBlog\n} = commSlice.actions;\nexport const initializeComms = id => {\n  return async dispatch => {\n    const lequip = await commentService.getAll(id);\n    dispatch(appendComments(lequip));\n  };\n};\nexport const newComment = (content, id) => {\n  return async dispatch => {\n    const commObj = {\n      comment: content\n    };\n    const newComm = await commentService.create(id, commObj).catch(() => dispatch(setNotif('There was an error when submitting your comment. Please wait a few moments and then try again.', 5)));\n    console.log(newComm, 'is new comm in new comment in reducer');\n    if (newComm) {\n      dispatch(appendComments(newComm));\n    }\n  };\n};\n\n//export const addingVote = (id, newObject) => {\n//  return async dispatch => {\n//    const voted = await blogService.update(id, newObject)\n//    console.log(voted, 'is voted in adding vote in reducer')\n//    dispatch(addVote(voted))\n//  }\n//}\n\n//export const removeEntry = (id) => {\n//  console.log(id, 'is id in remove entry in reducer')\n//  return async dispatch => {\n//    const deletion = await blogService.deleteEntry(id)\n//    console.log(deletion, 'is deletion in remove entry')\n//    dispatch(removeBlog(id))\n//  }\n//}\n\nexport default commSlice.reducer;","map":{"version":3,"names":["createSlice","commentService","setNotif","initialState","commSlice","name","reducers","appendComments","state","action","concat","payload","addVote","id","phraseToReplace","find","word","likes","console","log","removeBlog","blogWithoutDeleted","filter","diary","actions","initializeComms","dispatch","lequip","getAll","newComment","content","commObj","comment","newComm","create","catch","reducer"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/reducers/commentReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport commentService from '../services/comments'\nimport { setNotif } from './notifReducer'\n\nconst initialState = []\n\nconst commSlice = createSlice({\n  name: 'quips',\n  initialState,\n  reducers: {\n    appendComments(state, action){\n      //console.log(action, 'is action in append comments in comment reducer')\n      //console.log(JSON.parse(JSON.stringify(state)), 'is json json state in comment reducer')\n      //const newComms = [\n      return state.concat(action.payload)\n    },\n    addVote(state, action){\n      //console.log(action, 'is action in addVote reducer')\n      const id = action.payload.id\n      //console.log(id, 'is id in add vote')\n      const phraseToReplace = state.find((word) => word.id === id)\n      //console.log(JSON.parse(JSON.stringify(phraseToReplace)), 'is json json phrasetoreplace in add vote reducer')\n      //console.log(phraseToReplace.likes, 'is pTR likes in add vote')\n      phraseToReplace.likes = action.payload.likes + 1\n      console.log(phraseToReplace.likes, 'is pTR likes in add vote after made the same as action payload likes')\n    },\n    removeBlog(state, action){\n      //console.log(action, 'is action in removeblog')\n      const id = action.payload\n      const blogWithoutDeleted = state.filter((diary) => diary.id !== id)\n      return blogWithoutDeleted\n    }\n  }\n})\n\nexport const { addVote, appendComments, removeBlog } = commSlice.actions\n\nexport const initializeComms = (id) => {\n  return async dispatch => {\n    const lequip = await commentService.getAll(id)\n    dispatch(appendComments(lequip))\n  }\n}\n\nexport const newComment = (content, id) => {\n  return async dispatch => {\n    const commObj = { comment: content }\n    const newComm = await commentService.create(id, commObj).catch(() => dispatch(setNotif('There was an error when submitting your comment. Please wait a few moments and then try again.', 5)))\n    console.log(newComm, 'is new comm in new comment in reducer')\n    if (newComm){\n      dispatch(appendComments(newComm))\n    }\n  }\n}\n\n//export const addingVote = (id, newObject) => {\n//  return async dispatch => {\n//    const voted = await blogService.update(id, newObject)\n//    console.log(voted, 'is voted in adding vote in reducer')\n//    dispatch(addVote(voted))\n//  }\n//}\n\n//export const removeEntry = (id) => {\n//  console.log(id, 'is id in remove entry in reducer')\n//  return async dispatch => {\n//    const deletion = await blogService.deleteEntry(id)\n//    console.log(deletion, 'is deletion in remove entry')\n//    dispatch(removeBlog(id))\n//  }\n//}\n\nexport default commSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,cAAc,MAAM,sBAAsB;AACjD,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,MAAMC,YAAY,GAAG,EAAE;AAEvB,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,OAAO;EACbF,YAAY;EACZG,QAAQ,EAAE;IACRC,cAAc,CAACC,KAAK,EAAEC,MAAM,EAAC;MAC3B;MACA;MACA;MACA,OAAOD,KAAK,CAACE,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC;IACrC,CAAC;IACDC,OAAO,CAACJ,KAAK,EAAEC,MAAM,EAAC;MACpB;MACA,MAAMI,EAAE,GAAGJ,MAAM,CAACE,OAAO,CAACE,EAAE;MAC5B;MACA,MAAMC,eAAe,GAAGN,KAAK,CAACO,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;MAC5D;MACA;MACAC,eAAe,CAACG,KAAK,GAAGR,MAAM,CAACE,OAAO,CAACM,KAAK,GAAG,CAAC;MAChDC,OAAO,CAACC,GAAG,CAACL,eAAe,CAACG,KAAK,EAAE,sEAAsE,CAAC;IAC5G,CAAC;IACDG,UAAU,CAACZ,KAAK,EAAEC,MAAM,EAAC;MACvB;MACA,MAAMI,EAAE,GAAGJ,MAAM,CAACE,OAAO;MACzB,MAAMU,kBAAkB,GAAGb,KAAK,CAACc,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACV,EAAE,KAAKA,EAAE,CAAC;MACnE,OAAOQ,kBAAkB;IAC3B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET,OAAO;EAAEL,cAAc;EAAEa;AAAW,CAAC,GAAGhB,SAAS,CAACoB,OAAO;AAExE,OAAO,MAAMC,eAAe,GAAIZ,EAAE,IAAK;EACrC,OAAO,MAAMa,QAAQ,IAAI;IACvB,MAAMC,MAAM,GAAG,MAAM1B,cAAc,CAAC2B,MAAM,CAACf,EAAE,CAAC;IAC9Ca,QAAQ,CAACnB,cAAc,CAACoB,MAAM,CAAC,CAAC;EAClC,CAAC;AACH,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,CAACC,OAAO,EAAEjB,EAAE,KAAK;EACzC,OAAO,MAAMa,QAAQ,IAAI;IACvB,MAAMK,OAAO,GAAG;MAAEC,OAAO,EAAEF;IAAQ,CAAC;IACpC,MAAMG,OAAO,GAAG,MAAMhC,cAAc,CAACiC,MAAM,CAACrB,EAAE,EAAEkB,OAAO,CAAC,CAACI,KAAK,CAAC,MAAMT,QAAQ,CAACxB,QAAQ,CAAC,gGAAgG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7LgB,OAAO,CAACC,GAAG,CAACc,OAAO,EAAE,uCAAuC,CAAC;IAC7D,IAAIA,OAAO,EAAC;MACVP,QAAQ,CAACnB,cAAc,CAAC0B,OAAO,CAAC,CAAC;IACnC;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe7B,SAAS,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}