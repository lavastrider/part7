{"ast":null,"code":"//object will contain title, author, and url\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst initialState = blogService.getAll().then(blogs => blogs);\nconst blogSlice = createSlice({\n  name: 'diaries',\n  initialState,\n  reducers: {\n    appendBlogs(state, action) {\n      return state.concat(action.payload);\n    },\n    addVote(state, action) {\n      console.log(action, 'is action in replace phrase');\n      const id = action.payload.id;\n      const phraseToReplace = state.find(word => word.id === id);\n      console.log(phraseToReplace, 'is phrasetoreplace in add vote');\n      phraseToReplace.votes = action.payload.votes;\n    }\n  }\n});\nexport const {\n  addVote,\n  appendBlogs\n} = blogSlice.actions;\n\n//export const initializeWords = () => {\n//  return async dispatch => {\n//    const words = await wordService.getAll()\n//    dispatch(appendAnex(words))\n//  }\n//}\n\n//export const newWords = (content) => {\n//   return async dispatch => {\n//     const newWord = await wordService.createNew(content)\n//     dispatch(appendAnex(newWord))\n//   }\n//}\n\n//export const addingVote = (id) => {\n//  return async dispatch => {\n//    const voted = await wordService.incVote(id)\n//    dispatch(replacePhrase(voted))\n//  }\n//}\n\n//export const deleteEntry = (id) => {\n//\n//\n//}\n\nexport default blogSlice.reducer;","map":{"version":3,"names":["createSlice","blogService","initialState","getAll","then","blogs","blogSlice","name","reducers","appendBlogs","state","action","concat","payload","addVote","console","log","id","phraseToReplace","find","word","votes","actions","reducer"],"sources":["C:/Users/bilstr/Documents/GitHub/part7/extended-bloglist/src/reducers/blogReducer.js"],"sourcesContent":["//object will contain title, author, and url\n\nimport { createSlice } from '@reduxjs/toolkit'\nimport blogService from '../services/blogs'\n\nconst initialState = blogService.getAll().then(blogs => blogs)\n\nconst blogSlice = createSlice({\n  name: 'diaries',\n  initialState,\n  reducers: {\n    appendBlogs(state, action){\n      return state.concat(action.payload)\n    },\n    addVote(state, action){\n      console.log(action, 'is action in replace phrase')\n      const id = action.payload.id\n      const phraseToReplace = state.find((word) => word.id === id)\n      console.log(phraseToReplace, 'is phrasetoreplace in add vote')\n      phraseToReplace.votes = action.payload.votes\n    }\n  }\n})\n\nexport const { addVote, appendBlogs } = blogSlice.actions\n\n//export const initializeWords = () => {\n//  return async dispatch => {\n//    const words = await wordService.getAll()\n//    dispatch(appendAnex(words))\n//  }\n//}\n\n//export const newWords = (content) => {\n//   return async dispatch => {\n//     const newWord = await wordService.createNew(content)\n//     dispatch(appendAnex(newWord))\n//   }\n//}\n\n//export const addingVote = (id) => {\n//  return async dispatch => {\n//    const voted = await wordService.incVote(id)\n//    dispatch(replacePhrase(voted))\n//  }\n//}\n\n//export const deleteEntry = (id) => {\n//\n//\n//}\n\nexport default blogSlice.reducer"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,WAAW,MAAM,mBAAmB;AAE3C,MAAMC,YAAY,GAAGD,WAAW,CAACE,MAAM,EAAE,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAAC;AAE9D,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,SAAS;EACfL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,CAACC,KAAK,EAAEC,MAAM,EAAC;MACxB,OAAOD,KAAK,CAACE,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC;IACrC,CAAC;IACDC,OAAO,CAACJ,KAAK,EAAEC,MAAM,EAAC;MACpBI,OAAO,CAACC,GAAG,CAACL,MAAM,EAAE,6BAA6B,CAAC;MAClD,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO,CAACI,EAAE;MAC5B,MAAMC,eAAe,GAAGR,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;MAC5DF,OAAO,CAACC,GAAG,CAACE,eAAe,EAAE,gCAAgC,CAAC;MAC9DA,eAAe,CAACG,KAAK,GAAGV,MAAM,CAACE,OAAO,CAACQ,KAAK;IAC9C;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP,OAAO;EAAEL;AAAY,CAAC,GAAGH,SAAS,CAACgB,OAAO;;AAEzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAehB,SAAS,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}